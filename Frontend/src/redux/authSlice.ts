// Importamos createSlice y PayloadAction desde Redux Toolkit
import { createSlice, PayloadAction } from "@reduxjs/toolkit";

// Definimos la interfaz que representar√° el estado de autenticaci√≥n
interface AuthState {
    user_id: string | null;   // ID del usuario (puede ser null si no est√° autenticado)
    userName: string | null;  // Nombre del usuario
    userEmail: string | null; // Correo del usuario
    isAuthenticated: boolean; // Estado de autenticaci√≥n (true si el usuario ha iniciado sesi√≥n, false en caso contrario)
}

// Definimos el estado inicial del usuario
const initialState: AuthState = {
    user_id: null,        // No hay usuario logueado al inicio
    userName: null,       // No hay nombre registrado al inicio
    userEmail: null,      // No hay email registrado al inicio
    isAuthenticated: false // El usuario no est√° autenticado al inicio
};

// Creamos un slice de Redux llamado "auth" para manejar la autenticaci√≥n
const authSlice = createSlice({
    name: 'auth', // Nombre del slice, usado internamente en Redux
    initialState, // Estado inicial del slice
    reducers: {   // Definimos las funciones que actualizan el estado

        // Acci√≥n para establecer el usuario despu√©s de iniciar sesi√≥n
        setUser(state, action: PayloadAction<{ user_id: string; userName: string; userEmail: string }>) {
            state.user_id = action.payload.user_id;   // Guardamos el ID del usuario
            state.userName = action.payload.userName; // Guardamos el nombre del usuario
            state.userEmail = action.payload.userEmail; // Guardamos el email del usuario
            state.isAuthenticated = true; // Marcamos que el usuario est√° autenticado
        },

        // Acci√≥n para cerrar sesi√≥n y limpiar el estado del usuario
        logoutUser(state) {
            return initialState; // Reiniciamos el estado al valor inicial (usuario no autenticado)
        },
    },
});

// Exportamos las acciones para que puedan ser usadas en el resto de la aplicaci√≥n
export const { setUser, logoutUser } = authSlice.actions;

// Exportamos el reducer para ser utilizado en el store de Redux
export default authSlice.reducer;


/*üìå Explicaci√≥n general
¬øQu√© es createSlice?

createSlice es una funci√≥n de Redux Toolkit que simplifica la creaci√≥n de un slice (una parte del estado global de Redux).
Define el estado inicial, acciones y reducer en un solo lugar.
¬øQu√© hace setUser?

Se ejecuta cuando el usuario inicia sesi√≥n correctamente.
Toma los datos del usuario (ID, nombre y correo) y los almacena en Redux.
Cambia isAuthenticated a true para indicar que el usuario ha iniciado sesi√≥n.
¬øQu√© hace logoutUser?

Se ejecuta cuando el usuario cierra sesi√≥n.
Restablece el estado al valor inicial (initialState), eliminando los datos del usuario.
¬øPor qu√© usamos PayloadAction?

PayloadAction se usa para definir el tipo de datos que se reciben en la acci√≥n.
En setUser, espera un objeto con user_id, userName y userEmail.
¬øC√≥mo se usa en la aplicaci√≥n?

Cuando un usuario inicia sesi√≥n correctamente, se despacha setUser(datosUsuario).
Cuando un usuario cierra sesi√≥n, se despacha logoutUser().

üéØ Conclusi√≥n
Este c√≥digo maneja la autenticaci√≥n del usuario con Redux Toolkit de manera eficiente.
‚úÖ Permite almacenar los datos del usuario despu√©s del login.
‚úÖ Mantiene un estado centralizado para toda la aplicaci√≥n.
‚úÖ Limpia el estado correctamente al cerrar sesi√≥n.

*/ 